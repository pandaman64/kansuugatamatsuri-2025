#import "@preview/touying:0.6.1": *
#import themes.metropolis: *
#import "@preview/cetz:0.3.4"
#import "@preview/fletcher:0.5.8" as fletcher: node, edge

#let cetz-canvas = touying-reducer.with(reduce: cetz.canvas, cover: cetz.draw.hide.with(bounds: true))
#let fletcher-diagram = touying-reducer.with(reduce: fletcher.diagram, cover: fletcher.hide)


#set text(font: "Noto Serif CJK JP")
#show: metropolis-theme.with(
  aspect-ratio: "16-9",
  config-info(
    title: [Lean„ÅßÊ≠£Ë¶èË°®Áèæ„Ç®„É≥„Ç∏„É≥„Çí„Å§„Åè„Çã],
    subtitle: [„Åù„Åó„Å¶Ê≠£„Åó„Åï„ÇíË®ºÊòé„Åô„Çã],
    author: [‰∫ïÂ±±Ê¢ÉÂ≠êÊ≠¥Âè≤È§® (pandaman64)],
    date: datetime(year: 2025, month: 6, day: 15),
  ),
)

#let styledLink(href, content) = {
  link(href)[#text(fill: blue)[#underline[#content]]]
}

// #show: touying-set-config.with(config-colors(
//   primary: black,
// ))
#show strong: set text(weight: "bold")

#title-slide()

== Áô∫Ë°®„ÅÆÁõÆÁöÑ

- ÂÜÖÂÆπ
  - Lean„Å®„ÅØÔºü
  - „Å™„ÅúLean„ÅßÂÆöÁêÜ„ÇíË®ºÊòé„Åô„Çã„ÅÆ„ÅãÔºü
  - „Éó„É≠„Ç∞„É©„É†„ÅÆÊ≠£„Åó„Åï„ÇíË®ºÊòé„Åô„Çã„Å®„ÅØÔºü
- ‰ª≤Èñì„ÇíÊé¢„Åó„Å´Êù•„Åü
  - „Åø„Çì„Å™„ÇÇÂÆöÁêÜË®ºÊòé„ÄÅ„ÇÑ„Çç„ÅÜÔºÅ
  - #text(size: 0.75em)[Ôºà„ÅÇ„Çè„Çà„Åè„Å∞Ôºâ]#styledLink("https://github.com/pandaman64/lean-regex")[lean-regex]„Å´„Ç≥„É≥„Éà„É™„Éì„É•„Éº„Éà„ÄÅ„Åó„Çà„ÅÜÔºÅ
  
= Lean„Å®„ÅØÔºü

== Lean„Å®„ÅØ‰Ωï„Åã

- Lean„ÅÆ‰∫åÈù¢ÊÄß
  - Á¥îÁ≤ãÈñ¢Êï∞„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞Ë®ÄË™û
    - ‰æùÂ≠òÂûã: Âûã„ÅÆ‰∏≠„Å´ÂÄ§„ÅåÂê´„ÇÅ„Çâ„Çå„Çã
    - „É¢„Éä„Éâ„Çí‰Ωø„Å£„ÅüÊâãÁ∂ö„ÅçÂûã„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞
    - Ëá™Áî±„Å™„Éû„ÇØ„É≠„Ç∑„Çπ„ÉÜ„É†
      - #styledLink("https://github.com/pandaman64/lean-regex/blob/a78f86844b4878421b0b9181c095f449f61c0720/regex/Regex/Regex/Elab.lean#L89-L90")[Ê≠£Ë¶èË°®Áèæ]„ÄÅ#styledLink("https://github.com/leanprover/verso/blob/50be939050ddca47648ea7acd3eac60798f9ecea/examples/website/DemoSiteMain.lean")[HTML]„ÄÅ#styledLink("https://github.com/FWuermse/lean-postgres/blob/e3e19e4eee439932b2b5429cfe810a234f7aa453/examples/query/Main.lean")[SQL]
  - ÂÆöÁêÜË®ºÊòéÊîØÊè¥Á≥ª
    - Êï∞Â≠¶„ÅÆÂÆöÁêÜ„ÇÑ„Éó„É≠„Ç∞„É©„É†„ÅÆÊÄßË≥™„ÄÅ„Åù„Çå„Çâ„ÅÆË®ºÊòé„ÇíË®òËø∞„Åô„ÇãË®ÄË™û
    - Lean„ÅÆ*„Ç´„Éº„Éç„É´*„ÅåË®ºÊòé„ÅåÊàêÁ´ã„Åô„Çã„Åì„Å®„ÇíÂé≥ÂØÜ„Å´„ÉÅ„Çß„ÉÉ„ÇØ„Åô„Çã

== Lean„ÅÆ„Ç≥„Éº„Éâ‰æã

#grid(
  columns: (1fr, 1fr),
  rows: (1fr, 1fr),
  figure(
    caption: text(size: 0.75em)[„Éó„É≠„Ç∞„É©„É†„ÅÆ‰æã],
    supplement: none,
  )[
  ```lean
  def fib (n : Nat) : Nat :=
    match n with
    | 0 | 1 => 1
    | n + 2 => fib n + fib (n + 1)
  def main : IO Unit := do
    IO.println s!"fib 10 = {fib 10}"
  ```
  ],
  figure(
    caption: text(size: 0.75em)[Ë®ºÊòé„ÅÆ‰æã],
    supplement: none
  )[
  ```lean
  theorem reverse_reverse (xs : List Œ±) :
    xs.reverse.reverse = xs := by
    induction xs with
    | nil => rfl
    | cons x xs ih =>
      simp [ih]
  ```  
  ],
  grid.cell(
    colspan: 2, 
    figure(
      caption: text(size: 0.75em)[Ë®ºÊòé„Çí‰Ωø„ÅÜ„Éó„É≠„Ç∞„É©„É†„ÅÆ‰æã],
      supplement: none
    )[
      ```lean
      def sumAt {n} (xs ys : Vector Nat n) (i : Nat) : Option Nat :=
        -- `h` is a proof that `i < n` holds
        if h : i < n then
          some (xs[i]'h + ys[i]'h)
        else
          none
      ```
    ]
  )
)

== Lean„ÅßÊ≠£Ë¶èË°®Áèæ„ÇíÂÆüË£Ö„Åô„Çã

- #styledLink("https://github.com/pandaman64/lean-regex")[lean-regex]: Ëá™‰Ωú„ÅÆÊ≠£Ë¶èË°®Áèæ„É©„Ç§„Éñ„É©„É™
  - Ê≠£Ë¶èË°®Áèæ„Çí„Ç™„Éº„Éà„Éû„Éà„É≥„Å´„Ç≥„É≥„Éë„Ç§„É´„Åó„Å¶ÂÆüË°å
  - Lean‰∏ä„ÅßÂÆüË£Ö„ÅÆÊ≠£„Åó„ÅÑ„Åì„Å®„ÇíÊ§úË®ºÊ∏à„Åø
- „ÄåÂÆüË£Ö„ÅåÊ≠£„Åó„ÅÑ„Äç„Å®„ÅØÔºü
  - Ê≠£Ë¶èË°®Áèæ„ÅÆ„Éû„ÉÉ„ÉÅÁµêÊûú„ÇíÂé≥ÂØÜ„Å´ÂÆöÁæ©„Åô„Çã
    - ```lean inductive Captures : Iterator ‚Üí Iterator ‚Üí CaptureGroups ‚Üí Expr ‚Üí Prop ```
  - Ê§úÁ¥¢Èñ¢Êï∞```lean def Regex.find : Iterator ‚Üí Regex ‚Üí Option CaptureGroups ```„Å´„Å§„ÅÑ„Å¶
    - ‚úÖ #styledLink("https://github.com/pandaman64/lean-regex/blob/a78f86844b4878421b0b9181c095f449f61c0720/correctness/RegexCorrectness/Regex/Basic.lean#L72")[ÂÅ•ÂÖ®ÊÄß]: Ë¶ã„Å§„Åã„Å£„Åü„Éû„ÉÉ„ÉÅ„ÅØ`Captures`„ÇíÂøÖ„ÅöÊ∫Ä„Åü„Åô
    - ‚úÖ #styledLink("https://github.com/pandaman64/lean-regex/blob/a78f86844b4878421b0b9181c095f449f61c0720/correctness/RegexCorrectness/Regex/Basic.lean#L93")[ÂÆåÂÖ®ÊÄß]: `Captures`„ÇíÊ∫Ä„Åü„Åô„Éû„ÉÉ„ÉÅ„ÅåÂ≠òÂú®„Åô„Çã„Å™„ÇâÂøÖ„Åö„Éû„ÉÉ„ÉÅ„ÇíË¶ã„Å§„Åë„Çã
    - „Åì„Çå„Çâ„ÇíÁ§∫„ÅôLean„ÅÆË®ºÊòé„ÇíÊõ∏„ÅÑ„Åü

== „Å™„ÅúÊ≠£Ë¶èË°®ÁèæÔºü

+ Ê≠£Ë¶èË°®Áèæ„ÅØÂ∫É„Åè‰Ωø„Çè„Çå„Å¶„ÅÑ„Çã
  - „ÉÜ„Ç≠„Çπ„ÉàÂá¶ÁêÜ„ÅÆÂ†¥Èù¢„Åß„Çà„ÅèÂá∫„Å¶„Åè„Çã
  - ÂÆüÁî®ÁöÑ„Å™„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞Ë®ÄË™û„Å´„ÅØÊ≠£Ë¶èË°®ÁèæÂÆüË£Ö„Åå„Å§„Åç„ÇÇ„ÅÆ
+ ‰ªïÊßò„ÉªÂÆüË£Ö„Åå„Åª„Å©„Çà„ÅèË§áÈõë
  - Ê§úÁ¥¢Èñ¢Êï∞„ÅÆÊ≠£„Åó„Åï„ÇíÊï∞Â≠¶ÁöÑ„Å´ÊòéÁ¢∫„Å´ÂÆöÂºèÂåñ„Åß„Åç„ÇãÔºà„Åë„Å©„ÄÅÁ¥∞ÈÉ®„ÅØÂæÆÂ¶ôÔºâ
  - ÂÆüË£Ö„ÅØ„Ç™„Éº„Éà„Éû„Éà„É≥„Å∏„ÅÆ„Ç≥„É≥„Éë„Ç§„É´„ÇÑÊé¢Á¥¢„Å™„Å©„ÄÅ„Åù„Åì„Åù„ÅìË§áÈõë
  - „Ç®„ÉÉ„Ç∏„Ç±„Éº„Çπ„ÇÇÂê´„ÇÅ„Å¶ÂÆöÁêÜË®ºÊòéÊîØÊè¥Á≥ª„ÅßÂé≥ÂØÜ„Å´Ë°®Áèæ„ÉªÊ§úË®º„Åô„Çã‰æ°ÂÄ§„ÅÇ„Çä
+ „Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„ÅåÈáçË¶Å
  - Â§ßÈáè„ÅÆ„ÉÜ„Ç≠„Çπ„Éà„ÇíÂäπÁéá„Çà„ÅèÂá¶ÁêÜ„Åó„Åü„ÅÑ
  - Lean„ÅÆÊúÄÈÅ©Âåñ„ÅÆÂá∫Áï™ÔºÅ

== Lean„ÅÆÊúÄÈÅ©Âåñ

- 2„Å§„ÅÆÂÆüË°å„É¢„Éá„É´
  + „Ç´„Éº„Éç„É´„Å´„Çà„Çã„Ç§„É≥„Çø„Éó„É™„Çø: Ë®ºÊòé„ÅÆÊ§úË®º„Éª„Ç®„Éá„Ç£„Çø„Åß„ÅÆÂÆüË°å„Å™„Å©
  + C„Å∏„ÅÆ„Ç≥„É≥„Éë„Ç§„É´: Lean„ÇíCË®ÄË™û„Å´Â§âÊèõ„Åó„Å¶„Éç„Ç§„ÉÜ„Ç£„Éñ„Ç≥„Éº„Éâ„ÇíÁîüÊàê
- C„Å∏„ÅÆ„Ç≥„É≥„Éë„Ç§„É´ÊôÇ„ÅØ„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÇíÂèÇÁÖß„Ç´„Ç¶„É≥„Çø„Åß‰øùÊåÅ
  - Ê≠£Ê†º„Å™Á¥îÁ≤ãÈñ¢Êï∞ÂûãË®ÄË™û„Å™„ÅÆ„ÅßÔºàÂü∫Êú¨ÁöÑ„Å´„ÅØÔºâÂèÇÁÖß„Çµ„Ç§„ÇØ„É´„ÅåÁô∫Áîü„Åó„Å™„ÅÑ
- ÂèÇÁÖß„Ç´„Ç¶„É≥„Çø„ÇíË¶ã„Çã„Å®„Éá„Éº„ÇøÊßãÈÄ†„ÅÆÊõ¥Êñ∞„Çí*Á†¥Â£äÁöÑÂ§âÊõ¥*„Å´ÊúÄÈÅ©Âåñ„Åß„Åç„Çã
  - ‰æã: ```lean let xs' := Array.set xs i v``` „ÅÆ„Çà„ÅÜ„Å™Êìç‰Ωú„ÅåÂÆüË≥™O(1)„ÅßÂÆüË°å
    - Ë®ºÊòé„ÅÆÊ§úË®ºÊôÇ„ÅØ`xs`„Å®`xs'`„ÅÆ‰∏°Êñπ„ÅåÂêåÊôÇ„Å´Â≠òÂú®„Åô„Çã„Åã„ÅÆ„Çà„ÅÜ„Å´Êâ±„Åà„Çã
  - „Ç™„Éº„Éà„Éû„Éà„É≥„Éô„Éº„Çπ„ÅÆÊ≠£Ë¶èË°®Áèæ„Ç®„É≥„Ç∏„É≥„Å´ÊúÄÈÅ©

= „Å™„ÅúÂÆöÁêÜË®ºÊòé„Åô„Çã„ÅÆ„ÅãÔºü
  
== „Å™„ÅúÂÆöÁêÜË®ºÊòé„Åô„Çã„ÅÆ„ÅãÔºü

- ÂÆöÁêÜË®ºÊòé„ÅØËã¶„Åó„ÅÑ...
  - Ë®ºÊòé„ÅÆ„Ç≥„Éº„ÉâÈáè„ÅØÂÆüË£Ö„ÅÆ2„Äú20ÂÄç
  - ÂÆöÁêÜË®ºÊòéÊîØÊè¥Á≥ª„ÅÆ„ÅîÊ©üÂ´åÂèñ„Çä„Åß„Éú„Ç§„É©„Éº„Éó„É¨„Éº„Éà„ÅåÂ¢ó„Åà„Çã
    - #image("never_theorem_prover.png", width: 450pt)
- „Åù„Çå„Åß„ÇÇ„Å™„Åú„ÇÑ„Çã„ÅÆ„ÅãÔºü
  - ‰ø°È†ºÊÄß„ÅÆ‰øùË®º: ÊöóÂè∑Âá¶ÁêÜ„Å™„Å©„ÄÅ‰ø°È†ºÊÄß„ÅåË¶ÅÊ±Ç„Åï„Çå„ÇãÈ†òÂüü„ÅßÁ¢∫ÂÆü„Å™‰øùË®º„ÇíÂæó„Çã
  - ÂÆüË£Ö„ÅÆÂìÅË≥™Âêë‰∏ä: Ë®ºÊòéÈÅéÁ®ã„Åß„Éê„Ç∞„ÇíÁô∫Ë¶ã
  - „Éë„Ç∫„É´ÁöÑ„Å™Èù¢ÁôΩ„Åï: Ë®ºÊòé„ÅåÈÄö„Å£„ÅüÁû¨Èñì„ÅÆÈÅîÊàêÊÑü„ÅØ‰∏≠ÊØíÊÄß„Åå„ÅÇ„Çã
  - *Ê∑±„ÅÑÁêÜËß£*„ÅåÂæó„Çâ„Çå„Çã: „Åì„Çå„ÅåÊúÄ„ÇÇÈáçË¶ÅÔºÅ

== ÂÆöÁêÜË®ºÊòé„ÅßÂæó„Çâ„Çå„Çã„ÄåÊ∑±„ÅÑÁêÜËß£„Äç„Å®„ÅØ

- Ë®ºÊòé„ÇíÊõ∏„Åè„Å´„ÅØ*„Å™„ÅúÂÆöÁêÜ„ÅåÊàêÁ´ã„Åô„Çã„Åã*„ÇíÁêÜËß£„Åó„Å™„Åë„Çå„Å∞„Å™„Çâ„Å™„ÅÑ
  - Êõ∏„ÅÑ„Åü„Éó„É≠„Ç∞„É©„É†„Åå„Å™„ÅúÊ≠£„Åó„ÅèÂãï„Åè„ÅÆ„ÅãÔºü„ÇíÊ∑±„ÅèÁêÜËß£„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çã
- „Éó„É≠„Ç∞„É©„É†„ÅØ„Å™„ÅúÊ≠£„Åó„ÅèÂãï„Åè„ÅÆ„ÅãÔºü = *„Çà„ÅÑ‰∏çÂ§âÊù°‰ª∂*„ÅåÊàêÁ´ã„Åó„Å¶„ÅÑ„Çã„Åã„Çâ
  - ‰∏çÂ§âÊù°‰ª∂: „Éó„É≠„Ç∞„É©„É†„ÅÆÂêÑ„Çπ„ÉÜ„ÉÉ„ÉóÂâçÂæå„ÅßÂ∏∏„Å´ÊàêÁ´ã„Åó„Å¶„ÅÑ„ÇãÊÄßË≥™
  - „Éó„É≠„Ç∞„É©„É†„ÅÆÊÄßË≥™„ÇíË®ºÊòé„Åô„Çã„Å´„ÅØ
    + ‰∏çÂ§âÊù°‰ª∂„ÇíË¶ã„Å§„Åë„Çã
    + ÂêÑÂá¶ÁêÜ„ÅåË¶ã„Å§„Åë„Åü‰∏çÂ§âÊù°‰ª∂„Çí*‰øùÂ≠ò*„Åô„Çã„Åì„Å®„ÇíÁ§∫„Åô
    + Ë¶ã„Å§„Åë„Åü‰∏çÂ§âÊù°‰ª∂„ÅåÊâÄÊúõ„ÅÆÊÄßË≥™„Çí*Â∞é„Åè*„Åì„Å®„ÇíÁ§∫„Åô
  - „Å©„ÅÜ„ÇÑ„Å£„Å¶‰∏çÂ§âÊù°‰ª∂„ÇíË¶ã„Å§„Åë„Çã„ÅÆÔºü
    - #strike[È†ëÂºµ„Çãüí™]
    - ÂÖ∑‰Ωì‰æã„ÇíË®àÁÆó„Åó„Åü„ÇäÊ¨≤„Åó„ÅÑÊÄßË≥™„Åã„ÇâÈÄÜÁÆó„Åó„Åü„Çä„Åô„Çã

== ‰æã: DFS„ÅßÂà∞ÈÅîÂèØËÉΩÊÄß„ÇíË®àÁÆó„Åô„Çã

#let main-graph-node-text-size = 2em
#let main-graph-node-stroke = .1em
#let main-graph-node(pos, n, visited: false, current: false, dashed: false) = {
  let stroke = stroke(
    paint: if (visited) { red } else { black },
    thickness: if (current) { main-graph-node-stroke * 2 } else { main-graph-node-stroke },
    dash: if (dashed) { "dashed" } else { "solid" },
  )
  
  node(
    pos,
    text(size: main-graph-node-text-size)[#raw(str(n))],
    name: label("n" + str(n)),
    stroke: stroke
  )
}
#let main-graph-state-defaults = (false, false, false, false, false)
#let main-graph(visited: main-graph-state-defaults, current: -1) = {
  let nodes-data = (
    // coordinate, label
    ((0, 0), 0),
    ((4, -1), 1),
    ((4, 1), 2),
    ((8, 0), 3),
    ((0, 2), 4),
  )
  figure(
    fletcher-diagram(
      debug: 0,
      node-stroke: .1em,
      mark-scale: 100%,
      spacing: .5em,
      cell-size: 1em,
      // ..nodes,
      for (i, (pos, label)) in nodes-data.enumerate() {
        main-graph-node(
          pos,
          label,
          visited: visited.at(i, default: false),
          current: i == current,
        )
      },
      edge(<n0>, <n1>, "-|>"),
      edge(<n0>, <n2>, "-|>"),
      edge(<n1>, <n3>, "-|>"),
      edge(<n2>, <n3>, "-|>"),
      edge(<n4>, <n3>, "-|>", bend: -35deg),
    ),
    caption: text(size: 0.75em)[„Ç∞„É©„Éï„ÅÆ‰æã„ÄÇÊé¢Á¥¢„Åó„ÅüÈ†ÇÁÇπ„ÇíËµ§„ÅèÂ°ó„Å£„Å¶„ÅÑ„Çã],
    supplement: none,
  )
}

#let main-stack(xs) = {
  let visible-nodes = xs.map(it => it + (true,))
  let nodes = if (visible-nodes.len() < 3) {
    let ys = visible-nodes.rev()
    while (ys.len() < 3) {
      ys.push((0, false, false))
    }
    ys.rev()
  } else {
    visible-nodes.slice(0, 3)
  }
  let nodes2 = ()
  for (i, red, visible) in nodes {
    let diagram = fletcher-diagram(
      debug: 0,
      node-stroke: main-graph-node-stroke,
      main-graph-node((0, 0), i, visited: red)
    )

    if (visible) {
      nodes2.push(diagram)
    } else {
      nodes2.push(hide(diagram))
    }
  }
  figure(
    stack(
      dir: ttb,
      spacing: 1.0em,
      ..nodes2,
      line(length: 100%)
    ),
    caption: text(size: 0.75em)[„Åì„Çå„Åã„ÇâÊé¢Á¥¢„Åô„ÇãÈ†ÇÁÇπ„ÅÆ„Çπ„Çø„ÉÉ„ÇØ],
    supplement: none,
  )
}

#let main-diagram(visited: main-graph-state-defaults, current: -1, stack: ()) = {
  grid(
    columns: (1fr, 1fr),
    align: center,
    main-graph(visited: visited, current: current),
    main-stack(stack),
  )
}

#let invariant(color: black, label: none) = {
  align(center)[
    #grid(
      columns: 5,
      gutter: 0.5em,
      align: center,
      fletcher-diagram(
        node-stroke: .075em,
        node((0, 0), $v$, name: <v1>, width: 1.5em, height: 1.5em, shape: circle, stroke: red),
        node((1, 0), $v'$, name: <v2>, width: 1.5em, height: 1.5em, shape: circle, stroke: (dash: "dashed")),
        edge(<v1>, <v2>, "-|>", label: label)
      ),
      [„Å™„Çâ„Å∞],
      fletcher-diagram(
        node-stroke: .075em,
        node((0, 0), $v'$, name: <v1>, width: 1.5em, height: 1.5em, shape: circle, stroke: red)
      ),
      text(fill: color)[„Åæ„Åü„ÅØ],
      box[
        #stack(
          spacing: 0.5em,
          fletcher-diagram(
            node-stroke: .075em,
            node((0, 0), text(fill: color)[$v'$], name: <v1>, width: 1.5em, height: 1.5em, shape: circle, stroke: color)
          ),
          line(length: 2em, stroke: color)
        )
      ]
    )
  ]
}

#main-diagram(stack: ((0, false),))

- „Ç∞„É©„Éï„ÅÆÂà∞ÈÅîÂèØËÉΩÊÄß: È†ÇÁÇπ`0`„Åã„ÇâÂà∞ÈÅî„Åß„Åç„ÇãÈ†ÇÁÇπ„ÅÆÈõÜÂêà„ÅØÔºü
  -  Ê≠£Ë¶èË°®Áèæ„ÅÆ„Éû„ÉÉ„ÉÅ #sym.eq.dots.down Ê≠£Ë¶èË°®Áèæ„Çí„Ç≥„É≥„Éë„Ç§„É´„Åó„Åü„Ç™„Éº„Éà„Éû„Éà„É≥„ÅÆÂà∞ÈÅîÂèØËÉΩÊÄß
- DFSÔºàÊ∑±„ÅïÂÑ™ÂÖàÊé¢Á¥¢Ôºâ„ÅßÂà∞ÈÅîÂèØËÉΩÊÄß„ÅÆÂà§ÂÆö„Åå„Åß„Åç„Çã„ÄÇ„Å™„ÅúÔºü
  - DFS„Åå*„Çà„ÅÑ‰∏çÂ§âÊù°‰ª∂*„ÇíÊ∫Ä„Åü„Åô„Åã„Çâ

== DFS„ÅÆ‰∏çÂ§âÊù°‰ª∂

#main-diagram(stack: ((0, false),))

- *‰∏çÂ§âÊù°‰ª∂*: Êé¢Á¥¢Ê∏à„Åø„ÅÆÈ†ÇÁÇπ„Åã„Çâ1„Çπ„ÉÜ„ÉÉ„ÉóÂÖà„ÅÆÈ†ÇÁÇπ„ÅØÊó¢„Å´Êé¢Á¥¢Ê∏à„Åøor„Çπ„Çø„ÉÉ„ÇØ‰∏ä

#invariant()

// - DFS„Ç¢„É´„Ç¥„É™„Ç∫„É†„Åå‰øùÊåÅ„Åô„ÇãÁä∂ÊÖã
//   - Ë®™ÂïèÊ∏à„ÅøÈ†ÇÁÇπ„ÅÆÈõÜÂêà`visited: HashSet Node`
//   - „Åì„Çå„Åã„ÇâË®™Âïè„Åô„ÇãÈ†ÇÁÇπ„ÅÆ„Çπ„Çø„ÉÉ„ÇØ`stack: Stack Node`
// - ‰∏çÂ§âÊù°‰ª∂: $forall v in "visited", v arrow.r.long v' arrow.r.double v' in "visited" or v' in "stack"$
  // - È†ÇÁÇπ$v$„ÅåË®™ÂïèÊ∏à„Åø„Å™„Çâ„Å∞„ÄÅ$v$„Åã„Çâ1„Çπ„ÉÜ„ÉÉ„Éó„ÅßÂà∞ÈÅîÂèØËÉΩ„Å™È†ÇÁÇπ$v'$„ÅØ
  //   - Êó¢„Å´Ë®™ÂïèÊ∏à„Åø($v' in "visited"$)„ÄÅ
  //   - „ÇÇ„Åó„Åè„ÅØ„ÄÅ„Åì„Çå„Åã„ÇâË®™Âïè„Åô„ÇãÈ†ÇÁÇπ„ÅÆ„Çπ„Çø„ÉÉ„ÇØ„Å´Âê´„Åæ„Çå„Çã($v' in "stack"$)

#let invariant-diagrams = (
  main-diagram(stack: ((0, false),)),
  main-diagram(stack: ((0, true),)),
  main-diagram(visited: (true,), stack: ()),
  main-diagram(visited: (true,), stack: ((1, false), (2, false),)),
  main-diagram(visited: (true,), stack: ((1, true), (2, false),)),
  main-diagram(visited: (true, true), stack: ((2, false),)),
  main-diagram(visited: (true, true), stack: ((3, false), (2, false),)),
  main-diagram(visited: (true, true), stack: ((3, true), (2, false),)),
  main-diagram(visited: (true, true, false, true), stack: ((2, false),)),
  main-diagram(visited: (true, true, false, true), stack: ((2, true),)),
  main-diagram(visited: (true, true, true, true), stack: ()),
  main-diagram(visited: (true, true, true, true), stack: ((3, false),)),
  main-diagram(visited: (true, true, true, true), stack: ((3, true),)),
  main-diagram(visited: (true, true, true, true), stack: ()),
)

== ‰∏çÂ§âÊù°‰ª∂„ÅÆ‰øùÂ≠ò

#slide(repeat: invariant-diagrams.len(), self => [
  #let (uncover, only, alternatives) = utils.methods(self)

  #alternatives(..invariant-diagrams)

  - *‰∏çÂ§âÊù°‰ª∂*: Êé¢Á¥¢Ê∏à„Åø„ÅÆÈ†ÇÁÇπ„Åã„Çâ1„Çπ„ÉÜ„ÉÉ„ÉóÂÖà„ÅÆÈ†ÇÁÇπ„ÅØÊó¢„Å´Êé¢Á¥¢Ê∏à„Åøor„Çπ„Çø„ÉÉ„ÇØ‰∏ä
    - DFS„ÅÆÂêÑ„Çπ„ÉÜ„ÉÉ„Éó„Åå‰∏çÂ§âÊù°‰ª∂„Çí*‰øùÂ≠ò*„Åô„Çã
    
  #invariant()
])

== ‰∏çÂ§âÊù°‰ª∂„ÅåÂà∞ÈÅîÂèØËÉΩÊÄß„ÇíÂ∞é„Åè

#slide(repeat: 3, self => [
  #let (uncover, only, alternatives) = utils.methods(self)
  
  #main-diagram(visited: (true, true, true, true), stack: ())

  - „Çπ„Çø„ÉÉ„ÇØ„ÅåÁ©∫„Å´„Å™„Å£„Åü„ÇâË®àÁÆó„ÅåÂÆå‰∫Ü
  - *‰∏çÂ§âÊù°‰ª∂*: Êé¢Á¥¢Ê∏à„Åø„ÅÆÈ†ÇÁÇπ„Åã„Çâ#alternatives[1][1][*N*]„Çπ„ÉÜ„ÉÉ„ÉóÂÖà„ÅÆÈ†ÇÁÇπ„ÅØÊó¢„Å´Êé¢Á¥¢Ê∏à„Åø#alternatives(repeat-last: true)[or„Çπ„Çø„ÉÉ„ÇØ‰∏ä][#text(fill: gray)[or„Çπ„Çø„ÉÉ„ÇØ‰∏ä]]

  #alternatives(
    repeat-last: true,
    invariant(),
    invariant(color: gray),
    invariant(color: gray, label: [*N*]),
  )
])

== ‰∏çÂ§âÊù°‰ª∂„ÅåÂà∞ÈÅîÂèØËÉΩÊÄß„ÇíÂ∞é„Åè

#main-diagram(visited: (true, true, true, true), stack: ())

- *‰∏çÂ§âÊù°‰ª∂*: Êé¢Á¥¢Ê∏à„Åø„ÅÆÈ†ÇÁÇπ„Åã„Çâ1„Çπ„ÉÜ„ÉÉ„ÉóÂÖà„ÅÆÈ†ÇÁÇπ„ÅØÊó¢„Å´Êé¢Á¥¢Ê∏à„Åø#text(fill: gray)[or„Çπ„Çø„ÉÉ„ÇØ‰∏ä]
  - „Çà„Å£„Å¶„ÄÅN„Çπ„ÉÜ„ÉÉ„ÉóÂÖà„ÅÆÈ†ÇÁÇπ(= Âà∞ÈÅîÂèØËÉΩ„Å™È†ÇÁÇπ)„ÅØÂÖ®„Å¶Êé¢Á¥¢Ê∏à„Åø
- ÈÄÜ„Å´„ÄÅÂà•„ÅÆ‰∏çÂ§âÊù°‰ª∂„Çí‰Ωø„ÅÜ„Å®Âà∞ÈÅîÂèØËÉΩ„Å™È†ÇÁÇπ„Å†„ÅëÊé¢Á¥¢„Åô„Çã„Åì„Å®„ÅåÂàÜ„Åã„Çã
- „Åó„Åü„Åå„Å£„Å¶„ÄÅÂà∞ÈÅîÂèØËÉΩÊÄß„ÇíË®àÁÆó„Åô„Çã„Å´„ÅØDFS„Åß„Ç∞„É©„Éï„ÇíÊé¢Á¥¢„Åô„Çå„Å∞„Çà„ÅÑ üéâ
  - *„Çà„ÅÑ‰∏çÂ§âÊù°‰ª∂„ÅåDFS„ÅÆÊ≠£„Åó„Åï„ÇíÂ∞é„ÅÑ„Åü*

== „Å™„ÅúÂÆöÁêÜË®ºÊòé„Åô„Çã„ÅÆ„ÅãÔºü„ÅÆ„Åæ„Å®„ÇÅ

- ÂÆöÁêÜË®ºÊòé„ÅØ„Åü„ÅÑ„Å∏„ÇìËã¶„Åó„ÅÑ
- ÂÆöÁêÜË®ºÊòé„ÅØÂÆöÁêÜ„ÅÆ*Ê∑±„ÅÑÁêÜËß£*„Çí„ÇÇ„Åü„Çâ„Åô
  - „Éó„É≠„Ç∞„É©„É†„ÅÆÊ∑±„ÅÑÁêÜËß£ = *„Çà„ÅÑ‰∏çÂ§âÊù°‰ª∂*„ÇíË¶ã„Å§„Åë„Çã„Åì„Å®
- ÂÆöÁêÜË®ºÊòé„ÅØ„Å®„Å¶„ÇÇ*„ÇÑ„Çä„Åå„ÅÑ„Åå„ÅÇ„Çã*
  - ÂÖ®„Å¶„ÅåÁπã„Åå„Å£„ÅüÁû¨Èñì„ÅÆÊ∞óÊåÅ„Å°„Çà„Åï„ÅØ„Å®„Çì„Åß„ÇÇ„Å™„ÅÑ

= Ë®ºÊòé„Çí„Ç®„É≥„Ç∏„Éã„Ç¢„É™„É≥„Ç∞„Åô„Çã
  
== Ë®ºÊòé„Çí„Ç®„É≥„Ç∏„Éã„Ç¢„É™„É≥„Ç∞„Åô„Çã

- ÂÆöÁêÜË®ºÊòé„ÅÆËã¶„Åó„Åø„ÇíËªΩÊ∏õ„Åô„Çã
  - ÂïèÈ°å„ÇíÂàÜÂâ≤„Åô„Çã„Åì„Å®„Åß‰∏ÄÂ∫¶„Å´Êâ±„ÅÜË§áÈõë„Åï„Çí‰ΩéÊ∏õ„Åô„Çã
    - Ë®ºÊòé„ÅÆ‰∏ÄÈÉ®ÂàÜ„ÇíË£úÈ°å„Å®„Åó„Å¶Âàá„ÇäÂá∫„Åó„Å¶ÂÜçÂà©Áî®„Åô„Çã
  - „Ç≥„Éº„Éâ„ÇíÂÜçÂà©Áî®„Åó„Å¶„Éú„Ç§„É©„Éº„Éó„É¨„Éº„Éà„ÇíÊ∏õ„Çâ„Åô
    - ÂÆöÁêÜË®ºÊòé„Éë„Çø„Éº„É≥„Åå„ÅÇ„Çä„Åù„ÅÜ
    - ‰æã: #styledLink("https://zenn.dev/pandaman64/articles/lean-proof-data-ja")[ProofData„Åß‰∏≠ÈñìÁöÑ„Å™ÂÆöÁæ©„ÇÑË®ºÊòé„ÇíÊï¥ÁêÜ„Åô„Çã]
- „ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢ÈñãÁô∫„Å®Âêå„ÅòÔºÅÔºÅ
- LeanÁâπÊúâ„ÅÆËã¶„Åó„Åø
  - `do`ÊßãÊñá„ÅØÁ≥ñË°£ÊßãÊñá
    - Ë®ºÊòéÊôÇ„ÅØËÑ±Á≥ñÂæå„ÅÆÂºè„Å´„Å§„ÅÑ„Å¶Ë®ºÊòé„ÇíÊõ∏„Åè„Åì„Å®„Å´„Å™„Çã
  - *‰æùÂ≠òÂûã*„ÅØÁî®Ê≥ïÁî®Èáè„Å´„ÅäÊ∞ó„Çí„Å§„Åë„Å¶

== ‰æùÂ≠òÂûã„ÅØË´∏ÂàÉ„ÅÆÂâ£

- ‰æùÂ≠òÂûã: Âûã„ÅÆ‰∏≠„Å´ÂÄ§„ÇíÂê´„ÇÅ„Çâ„Çå„Çã
  - ```lean let i : Fin 5```„ÅÆ„Å®„Åç„ÄÅ`i`„ÅØ`5`Êú™Ê∫Ä„ÅÆËá™ÁÑ∂Êï∞
- „É°„É™„ÉÉ„Éà:
  - Âûã„ÅÆË°®ÁèæÂäõ„Åå‰∏ä„Åå„Çã
  - „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÂêë‰∏ä
    - ```lean def Array.get : (xs : Array Œ±) ‚Üí Fin xs.size ‚Üí Œ±```„ÅØÂ¢ÉÁïå„ÉÅ„Çß„ÉÉ„ÇØ„Åó„Å™„ÅÑ
- „Éá„É°„É™„ÉÉ„Éà:
  - Âûã„ÉÅ„Çß„ÉÉ„ÇØ„ÅåË§áÈõë„Å´„Å™„ÇãÔºàÂÄ§„ÅÆÁ≠â„Åó„Åï„ÇÇ„ÉÅ„Çß„ÉÉ„ÇØ„Åó„Å™„ÅÑ„Å®„ÅÑ„Åë„Å™„ÅÑ„Åü„ÇÅÔºâ
    - ÊòéÁ§∫ÁöÑ„Å™„Ç≠„É£„Çπ„Éà„ÅåÂøÖË¶Å„Å™Â†¥Âêà„ÅØ„Ç≥„Éº„Éâ„ÅåÂÜóÈï∑„Å´„Å™„Çã
    - ```lean ((x : Fin (n + 1)).cast (...n + 1 = 1 + n„ÅÆË®ºÊòé...)) : Fin (1 + n)```
  - ÂÆüË≥™ÁöÑ„Å´„ÄåÁ≠â„Åó„ÅÑ„ÄçÂÄ§„Åß„ÇÇÂûã„Ç∑„Çπ„ÉÜ„É†ÁöÑ„Å´Á≠â„Åó„Åè„Å™„Çâ„Å™„ÅÑ„Åì„Å®„Åå„ÅÇ„Çã
    - ‰æã: ```lean (3 : Fin 5) ‚â† (3 : Fin 10)```

== ‰æùÂ≠òÂûã„ÅÆÂà©Áî®Êà¶Áï•

- ‰Ωø„ÅÜ„ÅÆ„ÅØÊéß„Åà„ÇÅ„Å´
  - #emoji.person.ok Âûã„Å´ÁôªÂ†¥„Åô„ÇãÂÄ§„ÅåÂ§â„Çè„Çâ„Å™„ÅÑ„Å®„ÅçÔºà„Ç≠„É£„Çπ„Éà„ÅåÂøÖË¶ÅÁÑ°„ÅÑ„Å®„ÅçÔºâ
  - #emoji.person.ok „Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„ÅåÈáçË¶Å„Å™„Å®„Åç
  - #emoji.person.no Âûã„Å´ÁôªÂ†¥„Åô„ÇãÂÄ§„ÅåÂ§â„Çè„Çã„Å®„ÅçÔºà„Ç≠„É£„Çπ„Éà„ÅåÂøÖË¶Å„Å™„Å®„ÅçÔºâ
- ÂÄ§„Å®‰∏ÄÁ∑í„Å´ÂëΩÈ°å„ÇíÊ∏°„Åô„Åª„ÅÜ„ÅåÂïèÈ°å„ÅåËµ∑„Åç„Å™„ÅÑ„Åå„Å°
  - #emoji.quest ```lean def Array.get : (xs : Array Œ±) ‚Üí (i : Fin xs.size) : Œ±```
  - #emoji.thumb ```lean def Array.get' : (xs : Array Œ±) ‚Üí (i : Nat) ‚Üí (lt : i < xs.size) : Œ±```
  - `i`„ÅåÂçò„Å™„ÇãËá™ÁÑ∂Êï∞„Å™„ÅÆ„Åß„Ç≠„É£„Çπ„Éà„ÅÆÂïèÈ°å„ÅåËµ∑„Åç„Å™„ÅÑ

== „Åæ„Å®„ÇÅ

- Lean„ÅØÁ¥îÁ≤ãÈñ¢Êï∞„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞Ë®ÄË™û„Åß„ÅÇ„ÇäÂÆöÁêÜË®ºÊòéÊîØÊè¥Á≥ª„Åß„ÇÇ„ÅÇ„Çã
  - Lean„ÅßË®òËø∞„Åó„Åü„Éó„É≠„Ç∞„É©„É†„ÅÆÊÄßË≥™„ÇíLeanÂÜÖ„ÅßË®ºÊòé„Åß„Åç„Çã
- Lean„ÅßÊ≠£Ë¶èË°®Áèæ„É©„Ç§„Éñ„É©„É™`lean-regex`„Çí‰Ωú„Å£„Å¶„ÅÑ„Çã
  - „Åó„Åã„ÇÇ„ÄÅ`lean-regex`„ÅÆÊ≠£„Åó„Åï„ÇíLean„ÅÆÂÆöÁêÜ„Å®„Åó„Å¶Ë®ºÊòé„Åó„Åü
- „Éó„É≠„Ç∞„É©„É†„ÅÆÊÄßË≥™„ÅÆË®ºÊòé„ÅØÂØæË±°„ÅÆ„Éó„É≠„Ç∞„É©„É†„ÅÆÊ∑±„ÅÑÁêÜËß£„Çí„ÇÇ„Åü„Çâ„Åô
  - ÂÆöÁêÜË®ºÊòé„ÅØËã¶„Åó„ÅÑ„Åå„ÄÅ„Å®„Å£„Å¶„ÇÇ„ÇÑ„Çä„Åå„ÅÑ„Åå„ÅÇ„Çã
- *„Åø„Çì„Å™„ÇÇÂÆöÁêÜË®ºÊòé„ÄÅ„ÇÑ„Çç„ÅÜÔºÅ*

== ÂÆöÁêÜË®ºÊòé„Åå„ÇÑ„Çä„Åü„Åè„Å™„Å£„Åü„Çâ

- #styledLink("https://adam.math.hhu.de/#/")[Natural Numbers Game]: Lean„ÅÆÊ•Ω„Åó„ÅÑ„ÉÅ„É•„Éº„Éà„É™„Ç¢„É´
- #styledLink("https://lean-lang.org/functional_programming_in_lean/")[Functional Programming in Lean]: Lean„Åß„ÅÆ„Éó„É≠„Ç∞„É©„É†„ÅÆÊõ∏„ÅçÊñπ„Å®Ê§úË®º
- #styledLink("https://leanprover-community.github.io/mathematics_in_lean/index.html")[Mathematics in Lean]: Lean„ÅßÊï∞Â≠¶„ÇíË°®Áèæ„Åô„ÇãÊñπÊ≥ï (Mathlib„ÅÆÁ¥π‰ªã)
- #styledLink("https://leanprover.zulipchat.com/")[Lean Zulip]: Ë¶™Âàá„Å™„Ç≥„Éü„É•„Éã„ÉÜ„Ç£

== „Åä„Çè„Çä

#align(center)[
  #text(size: 3em)[„Åø„Çì„Å™„ÇÇÂÆöÁêÜË®ºÊòé„ÄÅ„ÇÑ„Çç„ÅÜÔºÅ]

  #styledLink("https://github.com/pandaman64/lean-regex")[lean-regex]„ÅØ„ÅÑ„Å§„Åß„ÇÇ„Ç≥„É≥„Éà„É™„Éì„É•„Éº„ÇøÂãüÈõÜ‰∏≠ÔºÅ
]
